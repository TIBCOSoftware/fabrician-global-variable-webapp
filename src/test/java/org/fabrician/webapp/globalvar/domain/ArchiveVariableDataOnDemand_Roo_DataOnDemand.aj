// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.fabrician.webapp.globalvar.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.fabrician.webapp.globalvar.domain.ArchiveVariable;
import org.fabrician.webapp.globalvar.domain.ArchiveVariableDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect ArchiveVariableDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ArchiveVariableDataOnDemand: @Component;
    
    private Random ArchiveVariableDataOnDemand.rnd = new SecureRandom();
    
    private List<ArchiveVariable> ArchiveVariableDataOnDemand.data;
    
    public ArchiveVariable ArchiveVariableDataOnDemand.getNewTransientArchiveVariable(int index) {
        ArchiveVariable obj = new ArchiveVariable();
        setArchiveGroupId(obj, index);
        setArchiveId(obj, index);
        setArchiveName(obj, index);
        setArchiveVersion(obj, index);
        setEnvironment(obj, index);
        setGvName(obj, index);
        setGvValue(obj, index);
        setLocation(obj, index);
        setLogicalMachine(obj, index);
        setProject(obj, index);
        return obj;
    }
    
    public void ArchiveVariableDataOnDemand.setArchiveGroupId(ArchiveVariable obj, int index) {
        String archiveGroupId = "archiveGroupId_" + index;
        if (archiveGroupId.length() > 1024) {
            archiveGroupId = archiveGroupId.substring(0, 1024);
        }
        obj.setArchiveGroupId(archiveGroupId);
    }
    
    public void ArchiveVariableDataOnDemand.setArchiveId(ArchiveVariable obj, int index) {
        String archiveId = "archiveId_" + index;
        if (archiveId.length() > 1024) {
            archiveId = archiveId.substring(0, 1024);
        }
        obj.setArchiveId(archiveId);
    }
    
    public void ArchiveVariableDataOnDemand.setArchiveName(ArchiveVariable obj, int index) {
        String archiveName = "archiveName_" + index;
        if (archiveName.length() > 1024) {
            archiveName = archiveName.substring(0, 1024);
        }
        obj.setArchiveName(archiveName);
    }
    
    public void ArchiveVariableDataOnDemand.setArchiveVersion(ArchiveVariable obj, int index) {
        String archiveVersion = "archiveVersion_" + index;
        if (archiveVersion.length() > 1024) {
            archiveVersion = archiveVersion.substring(0, 1024);
        }
        obj.setArchiveVersion(archiveVersion);
    }
    
    public void ArchiveVariableDataOnDemand.setEnvironment(ArchiveVariable obj, int index) {
        String environment = "environment_" + index;
        if (environment.length() > 1024) {
            environment = environment.substring(0, 1024);
        }
        obj.setEnvironment(environment);
    }
    
    public void ArchiveVariableDataOnDemand.setGvName(ArchiveVariable obj, int index) {
        String gvName = "gvName_" + index;
        if (gvName.length() > 1024) {
            gvName = gvName.substring(0, 1024);
        }
        obj.setGvName(gvName);
    }
    
    public void ArchiveVariableDataOnDemand.setGvValue(ArchiveVariable obj, int index) {
        String gvValue = "gvValue_" + index;
        if (gvValue.length() > 1024) {
            gvValue = gvValue.substring(0, 1024);
        }
        obj.setGvValue(gvValue);
    }
    
    public void ArchiveVariableDataOnDemand.setLocation(ArchiveVariable obj, int index) {
        String location = "location_" + index;
        if (location.length() > 1024) {
            location = location.substring(0, 1024);
        }
        obj.setLocation(location);
    }
    
    public void ArchiveVariableDataOnDemand.setLogicalMachine(ArchiveVariable obj, int index) {
        String logicalMachine = "logicalMachine_" + index;
        if (logicalMachine.length() > 1024) {
            logicalMachine = logicalMachine.substring(0, 1024);
        }
        obj.setLogicalMachine(logicalMachine);
    }
    
    public void ArchiveVariableDataOnDemand.setProject(ArchiveVariable obj, int index) {
        String project = "project_" + index;
        if (project.length() > 1024) {
            project = project.substring(0, 1024);
        }
        obj.setProject(project);
    }
    
    public ArchiveVariable ArchiveVariableDataOnDemand.getSpecificArchiveVariable(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ArchiveVariable obj = data.get(index);
        Long id = obj.getId();
        return ArchiveVariable.findArchiveVariable(id);
    }
    
    public ArchiveVariable ArchiveVariableDataOnDemand.getRandomArchiveVariable() {
        init();
        ArchiveVariable obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ArchiveVariable.findArchiveVariable(id);
    }
    
    public boolean ArchiveVariableDataOnDemand.modifyArchiveVariable(ArchiveVariable obj) {
        return false;
    }
    
    public void ArchiveVariableDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ArchiveVariable.findArchiveVariableEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ArchiveVariable' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ArchiveVariable>();
        for (int i = 0; i < 10; i++) {
            ArchiveVariable obj = getNewTransientArchiveVariable(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
